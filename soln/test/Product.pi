-----------------------------------------------------------------------
-- The Pi standard library
--
-- Products  (excerpted and ported from Product.agda)
------------------------------------------------------------------------

module Product where

import Equality

data Sig (A:Type)(B: A -> Type) : Type where
  Prod of (x:A) (B x)

proj1 : [A:Type] -> [B:A -> Type] -> Sig A B -> A 
proj1 = \[A][B] x . case x of 
  Prod x y -> x

proj2 : [A:Type] -> [B:A -> Type] -> (x : Sig A B) -> B (proj1[A][B] x)
proj2 = \[A][B] x . case x of 
  Prod z y -> y

curry : [A:Type] -> [B:A -> Type] -> [C : Sig A B -> Type] -> 
        ((p : Sig A B) -> C p) ->
		  ((x: A)  -> (y : B x) -> C (Prod x y))
curry = \ [A][B][C] f x y . f (Prod x y) 

uncurry : [A:Type] -> [B:A -> Type] -> [C : Sig A B -> Type] -> 
        ((x: A)  -> (y : B x) -> C (Prod x y)) ->
        ((p : Sig A B) -> C p) 
uncurry = \ [A][B][C] f p . case p of 
              Prod x y -> f x y 

---------------------------------------------------
-- Erased first component

data Exists (A:Type)(B: A -> Type) : Type where
  Prod of [x:A](B x)

-- can't define the first projections for this type

-- eproj1 : [A:Type] -> [B:A -> Type] -> Exists A B -> A 
-- eproj1 = \[A][B] x . case x of 
--   Prod x y -> x

eproj2 : [A:Type] -> [B:A -> Type] -> (x : Sig A B) -> 
   B (case x of { Prod x y -> x })
eproj2 = \[A][B] x . case x of 
  Prod x y -> y


---------------------------------------------------
-- Erased second component

data Refine (A:Type) (B : A -> Type) : Type where
  Prod of (x:A)[y:B x]

rproj1 : [A:Type] -> [B:A -> Type] -> Refine A B -> A 
rproj1 = \[A][B] x . case x of 
  Prod x y -> x

---------------------------------------------------
-- Non-dependent version 

Times : Type -> Type -> Type
Times = \ A B . Sig A (\x . B)

prod : [A:Type] -> [B:Type] -> A -> B -> Times A B
prod = \ [A] [B] x y . Prod x y

swap : [A:Type] -> [B:Type] -> Times A B -> Times B A
swap = \ [A][B] p . case p of 
           Prod x y -> Prod y x


